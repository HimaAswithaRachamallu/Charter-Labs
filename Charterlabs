!pip install cryptography ecdsa
from ecdsa import SigningKey, VerifyingKey, BadSignatureError, NIST256p
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.exceptions import InvalidSignature
import hashlib


class SignatureVerifier:
    def _init_(self, scheme_type):
        self.scheme_type = scheme_type

    def verify_signature(self, signer_address, signature, signed_hash):
        if self.scheme_type == 'ecdsa':
            return self.verify_ecdsa(signer_address, signature, signed_hash)
        elif self.scheme_type == 'rsa':
            return self.verify_rsa(signer_address, signature, signed_hash)
        else:
            raise ValueError("Unsupported signature scheme")

    def verify_ecdsa(self, signer_address, signature, signed_hash):
        try:
            verifying_key = VerifyingKey.from_string(signer_address, curve=NIST256p)
            verifying_key.verify(signature, signed_hash)
            return True
        except BadSignatureError:
            return False

    def verify_rsa(self, signer_address, signature, signed_hash):
        try:
            public_key = serialization.load_pem_public_key(signer_address)
            public_key.verify(
                signature,
                signed_hash,
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            return True
        except InvalidSignature:
            return False

# Utility functions
def hash_message(message):
    return hashlib.sha256(message.encode()).digest()

def generate_test_keys():
    # ECDSA key generation
    ecdsa_private_key = SigningKey.generate(curve=NIST256p)
    ecdsa_public_key = ecdsa_private_key.verifying_key.to_string()

    # RSA key generation
    rsa_private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    rsa_public_key = rsa_private_key.public_key()
    rsa_public_key_pem = rsa_public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    return ecdsa_public_key, ecdsa_private_key, rsa_public_key_pem, rsa_private_key

def test_signature_verification():
    # Generate keys
    ecdsa_public, ecdsa_private, rsa_public, rsa_private = generate_test_keys()

    # Test data
    message = "Test message for signing"
    hashed_msg = hash_message(message)

    # ECDSA Test
    ecdsa_signature = ecdsa_private.sign(hashed_msg)
    verifier = SignatureVerifier(scheme_type='ecdsa')
    result = verifier.verify_signature(ecdsa_public, ecdsa_signature, hashed_msg)
    print("ECDSA signature verification result:", result)  # Expected: True

    # RSA Test
    rsa_signature = rsa_private.sign(
        hashed_msg,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    verifier = SignatureVerifier(scheme_type='rsa')
    result = verifier.verify_signature(rsa_public, rsa_signature, hashed_msg)
    print("RSA signature verification result:", result)  # Expected: True

    # Test with invalid signature
    invalid_signature = b'invalid_signature'
    result = verifier.verify_signature(rsa_public, invalid_signature, hashed_msg)
    print("Invalid RSA signature verification result:", result)  # Expected: False

# Run tests
test_signature_verification()
